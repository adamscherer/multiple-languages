name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'java/infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check and cleanup failed VPC stack
      run: |
        STACK_NAME="${{ github.event.inputs.environment || 'dev' }}-bookstore-vpc"
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
        
        if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "UPDATE_ROLLBACK_COMPLETE" ]; then
          echo "Stack is in $STACK_STATUS state. Deleting stack..."
          aws cloudformation delete-stack --stack-name "$STACK_NAME"
          aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME"
          echo "Stack deleted successfully"
        fi

    - name: Deploy VPC Stack
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ github.event.inputs.environment || 'dev' }}-bookstore-vpc
        template: java/infrastructure/vpc.yml
        parameter-overrides: >
          Environment=${{ github.event.inputs.environment || 'dev' }}
        no-fail-on-empty-changeset: "1"

    - name: Check and cleanup failed ECS base stack
      run: |
        STACK_NAME="${{ github.event.inputs.environment || 'dev' }}-bookstore-ecs-base"
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
        
        if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "UPDATE_ROLLBACK_COMPLETE" ]; then
          echo "Stack is in $STACK_STATUS state. Deleting stack..."
          aws cloudformation delete-stack --stack-name "$STACK_NAME"
          
          echo "Waiting for stack deletion to complete..."
          while true; do
            CURRENT_STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
            
            if [ "$CURRENT_STATUS" = "DOES_NOT_EXIST" ]; then
              echo "Stack deleted successfully"
              break
            elif [[ "$CURRENT_STATUS" == *"FAILED"* ]]; then
              echo "Stack deletion failed with status: $CURRENT_STATUS"
              exit 1
            fi
            
            echo "Current status: $CURRENT_STATUS. Waiting..."
            sleep 10
          done
        fi

    - name: Deploy ECS Base Infrastructure
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ github.event.inputs.environment || 'dev' }}-bookstore-ecs-base
        template: java/infrastructure/ecs-base.yml
        parameter-overrides: >
          Environment=${{ github.event.inputs.environment || 'dev' }}
        capabilities: CAPABILITY_NAMED_IAM
        no-fail-on-empty-changeset: "1"
